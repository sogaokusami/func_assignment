// Remove a specific array element
// Write a function that takes an array (a) and a value (b) as argument. The function should remove all elements equal to 'b' from the array. Return the filtered array.

// Solution

function myFunction(a, b) {
  let newResult = [];
  a.forEach(function (number) {
    if (number !== b) {
      newResult.push(number);
    }
  });
  return newResult;
}
console.log(myFunction([false, "2", 1], false));

// Write a function that takes an array (a) and a value (n) as argument. Return the nth element of 'a'
function myFunction(a, n) {
  return a[n - 1];
}

// Remove first n elements of an array
function myFunction(a) {
  return a.slice(3);
}
console.log(myFunction([1, 2, 3, 4]));

// Get last n elements of an array
function myFunction(a) {
  return a.slice(-3);
}
console.log(myFunction([1, 2, 3, 4]));

// Get first n elements of an array
function myFunction(a) {
  return a.slice(0, 3);
}
console.log(myFunction([1, 2, 3, 4]));

// Count number of elements in JavaScript array
// Write a function that takes an array (a) as argument. Return the number of elements in a.
function myFunction(a) {
  return a.length;
}
console.log(myFunction([1, 2, 3, 4]));

// Count number of negative values in array
// Write a function that takes an array of numbers as argument. Return the number of negative values in the array.
function myFunction(a) {
  let counter = 0;
  a.forEach(function (number) {
    if (number < 0) {
      counter++;
    }
  });
  return counter;
}
console.log(myFunction([-1, 2, 3, -4, 5, -6, 7, -8, 9, 2, -4]));

// Sort an array of strings alphabetically
// Write a function that takes an array of strings as argument. Sort the array elements alphabetically. Return the result.
function myFunction(a) {
  return a.sort();
}
console.log(myFunction(["z", "c", "d", "a", "y", "a", "w"]));

// Sort an array of numbers in descending order
// Write a function that takes an array of numbers as argument. It should return an array with the numbers sorted in descending order.
// Test Cases:
// myFunction([1,3,2])
// Expected
// [3,2,1]
myFunction([4, 2, 3, 1]);
Expected[(4, 3, 2, 1)];
function myFunction(arr) {
  let descendingOrder = arr.sort(function (a, b) {
    return b - a;
  });
  return descendingOrder;
}

console.log(myFunction([1, 3, 2]));

// Calculate the sum of an array of numbers
// Write a function that takes an array of numbers as argument. It should return the sum of the numbers.
// Test Cases:
// myFunction([10,100,40])
// Expected
// 150
// myFunction([10,100,1000,1])
// Expected
// 1111
// myFunction([-50,0,50,200])
// Expected
// 200
// Solution 1 - forEach method
function myFunction(a) {
  let counter = 0;
  a.forEach(function (num) {
    counter = counter + num;
  });
  return counter;
}

console.log(myFunction([10, 100, 1000, 1]));

// Solution 2 - For loop
function myFunction(a) {
  let counter = 0;
  for (i = 0; i <= a.length - 1; i++) {
    counter = counter + a[i];
  }
  return counter;
}

console.log(myFunction([10, 100, 1000, 1]));

// Return the average of an array of numbers
// Write a function that takes an array of numbers as argument. It should return the average of the numbers.

// Solved: 9593
// myFunction([10,100,40])
// Expected
// 50
// myFunction([10,100,1000])
// Expected
// 370
// myFunction([-50,0,50,200])
// Expected
// 50

// solution 1 - forEach
function myFunction(a) {
  let sumTotal = 0;
  let counter = 0;

  a.forEach(function (num) {
    sumTotal = sumTotal + num;

    counter = counter + 1;

    calcAverage = sumTotal / counter;
  });
  return calcAverage;
}

console.log(myFunction([10, 100, 1000]));

// solution 2 - For Loop
function myFunction(a) {
  let sumTotal = 0;
  let counter = 0;

  for (i = 0; i <= a.length - 1; i++) {
    sumTotal = sumTotal + a[i];

    counter = counter + 1;

    calcAverage = sumTotal / counter;
  }
  return calcAverage;
}

console.log(myFunction([10, 100, 1000]));
